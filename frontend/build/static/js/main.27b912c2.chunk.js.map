{"version":3,"sources":["components/main/styles.module.css","components/memeForm/styles.module.css","components/memeForm/memeForm.jsx","components/memeCard/memeCard.jsx","components/memeList/memeList.jsx","components/common/navbar/navbar.jsx","components/main/main.jsx","App.js","reportWebVitals.js","index.js","components/memeCard/styles.module.css"],"names":["module","exports","MemeForm","props","useState","memeOwner","setMemeOwner","caption","setMemeCaption","memeUrl","setmemeUrl","setValue","event","target","name","value","Form","className","classes","Field","onChange","placeholder","Message","warning","header","list","Button","onClick","postData","url","submitMeme","type","memeCard","Card","Content","Icon","Header","charAt","toUpperCase","slice","Meta","toLowerCase","Image","src","image","wrapped","ui","Description","MemeList","firstHundredMemes","Grid","width","length","map","meme","navbar","Menu","fixed","inverted","Item","onToggle","position","Main","state","loading","checkValidation","error","response","fetchFirstHundredMemes","fetch","encodeURI","then","res","json","setState","catch","err","console","log","a","method","headers","body","JSON","stringify","resJSON","this","items","container","memeListContainer","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27b912c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"styles_mainContainer__1V_-R\",\"container\":\"styles_container__2SgF2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__1hqYg\"};","import { Button, Form , Message} from \"semantic-ui-react\";\nimport { React, useState } from \"react\";\nimport classes from './styles.module.css';\n\n// const submitMeme = () => {};\n\nconst MemeForm = (props) => {\n  const [memeOwner, setMemeOwner] = useState(\"\");\n  const [caption, setMemeCaption] = useState(\"\");\n  const [memeUrl, setmemeUrl] = useState(\"\");\n\n  const setValue = (event) => {\n    switch (event.target.name) {\n      case \"owner\":\n        setMemeOwner(event.target.value);\n        break;\n      case \"caption\":\n        setMemeCaption(event.target.value);\n        break;\n      case \"url\":\n        setmemeUrl(event.target.value);\n        break;\n    }\n  };\n\n  const checkValidation = (error, response)=>{\n    if(!error){\n      return true\n    }\n  }\n\n  const clearValues = ()=>{\n    setMemeOwner('')\n    setMemeCaption('')\n    setmemeUrl('')\n  }\n  const submitMeme = () => {\n    let postData = {name:memeOwner, url:memeUrl,caption:caption}\n    props.submitMeme(postData);\n    clearValues();\n  };\n  return (\n    <Form className={classes['form']}>\n  \n      <Form.Field>\n        <label>Meme Owner</label>\n        <input\n          value={memeOwner}\n          name=\"owner\"\n          onChange={setValue}\n          placeholder=\"Enter your full name\"\n        />\n        \n      </Form.Field>\n      <Form.Field>\n        <label>Caption</label>\n        <input\n          value={caption}\n          name=\"caption\"\n          onChange={setValue}\n          placeholder=\"Be Creative with caption\"\n        />\n      </Form.Field>\n      <Form.Field>\n        <label>Meme URL</label>\n        <input\n          value={memeUrl}\n          name=\"url\"\n          onChange={setValue}\n          placeholder=\"Enter URL of your meme here\"\n        />\n      </Form.Field>\n      <Message\n      warning\n      header='Could you check something!'\n      list={[\n        'That e-mail has been subscribed, but you have not yet clicked the verification link in your e-mail.',\n      ]}\n    />\n      <Button onClick={submitMeme} type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n};\n\nexport default MemeForm;\n","import React from 'react';\nimport {Card, Image, Icon} from 'semantic-ui-react';\nimport classes from './styles.module.css';\n\n\n\n\nconst memeCard = (props)=>{\n\n    return(\n        <div className={classes['memeCard']}>\n        <Card >\n        <Card.Content>\n            <div>\n            <Icon name='user outline' /> <Card.Header className={classes.header}>{props.name.charAt(0).toUpperCase() + props.name.slice(1)}</Card.Header>\n            </div>\n             \n                <Card.Meta>@{props.name.charAt(0).toLowerCase() + props.name.slice(1)}</Card.Meta>\n        </Card.Content>\n            <div className={classes['cardImageContainer']} >\n            <Image className={classes['cardImage']} src={props.image}   wrapped ui={false} />\n            </div>\n            <Card.Content>\n                <Card.Description>{props.caption}</Card.Description>\n            </Card.Content>\n        </Card>\n        </div>\n    )\n\n}\n\nexport default memeCard;","import React, { useEffect, useState } from 'react';\nimport {Grid} from 'semantic-ui-react';\nimport MemeCard from '../memeCard/memeCard';\n\n\n\nconst MemeList = (props)=>{\n\n    const {firstHundredMemes} = props;\n\n\n\n    return(\n        \n        <Grid  width={16} >  \n        \n       { firstHundredMemes.length > 0 ? firstHundredMemes.map((meme)=>(\n        \n       \n       <MemeCard image={meme.url} name={meme.name} caption={meme.caption} />\n    \n       )) :''}\n       \n        </Grid>\n\n    )\n\n}\n\nexport default MemeList;\n\n\n","import React from 'react';\nimport {\n    Container,\n    Icon,\n    Image,\n    Menu,\n    Sidebar,\n    Responsive\n  } from \"semantic-ui-react\";\n\n\nconst navbar = (props)=>{\n\n    return(\n\n        <Menu fixed=\"top\" inverted>\n        <Menu.Item>\n          XMeme\n        </Menu.Item>\n        <Menu.Item onClick={props.onToggle}>\n         \n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n          {/* {props.items.map(props.rightItems, item => <Menu.Item {...item} />)} */}\n        </Menu.Menu>\n      </Menu>\n\n    )\n\n\n\n}\n\nexport default navbar;","import React from 'react';\nimport MemeCard from '../memeCard/memeCard';\nimport MemeList from '../memeList/memeList';\nimport MemeForm from '../memeForm/memeForm';\nimport {Container}  from 'semantic-ui-react';\nimport classes from './styles.module.css';\nimport Navbar from '../common/navbar/navbar';\n\n\nclass Main extends React.Component{\n\n    state={\n       loading:false,\n       firstHundredMemes:null\n    }\n\n    checkValidation = (error, response)=>{\n        if(!error){\n          return true\n        }\n      }\n    componentDidMount(){\n        this.fetchFirstHundredMemes();\n\n     \n\n    }\n\n     fetchFirstHundredMemes = ()=>{\n        fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`))\n        .then((res)=>{\n          return res.json()\n        })\n        .then((response)=>{\n            this.setState({firstHundredMemes:response});\n        })\n        .catch((err)=>{\n            console.log(`Error occured during fetch ${err}`);\n        })\n\n    }\n\n    // componentDidUpdate(){\n    //     this.fetchFirstHundredMemes();\n    // }\n    submitMeme = async (postData)=>{\n     \n        this.setState({loading:true});\n\n        const memes = await fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`),{method:'post', headers:{'Content-Type': 'application/json'} ,body:JSON.stringify(postData)})\n        .then((res)=>{\n            return res.json();\n        })\n        .then((resJSON)=>{\n            \n           let valResult =  this.checkValidation(false,resJSON)\n           if(valResult){\n            // clearValues()\n          \n            return resJSON\n           }\n          \n        })\n        .catch((err)=>{\n            this.setState({loading:false});\n          console.log(`Error occured during fetch api`)\n        })\n        this.fetchFirstHundredMemes();\n    }\n\n\n  \n        render(){\n\n            return(\n                <div className={classes['mainContainer']}>\n                    <Navbar items={['Login', 'Register']} />\n                    <div className={classes.container}>\n                    <MemeForm submitMeme = {this.submitMeme} />\n                    <div className={classes.memeListContainer}>\n                    {this.state.firstHundredMemes ?  <MemeList firstHundredMemes={this.state.firstHundredMemes}/> :''}\n                    </div>\n                   </div>\n                </div>\n            )\n\n        }\n    \n\n}\n\nexport default Main;\n\n\n","import MemeForm from './components/memeForm/memeForm';\nimport 'semantic-ui-css/semantic.min.css'\nimport MemeList from './components/memeList/memeList';\nimport Main from './components/main/main';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"memeCard\":\"styles_memeCard__17EJQ\",\"cardImageContainer\":\"styles_cardImageContainer__1fkyQ\",\"cardImage\":\"styles_cardImage__1r0kH\",\"header\":\"styles_header__3nVxg\"};"],"sourceRoot":""}