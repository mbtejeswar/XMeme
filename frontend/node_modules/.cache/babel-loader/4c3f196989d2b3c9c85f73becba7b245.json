{"ast":null,"code":"import _slicedToArray from\"/home/tejeswar/VS_Workspace/XMeme/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,Form,Message}from\"semantic-ui-react\";import{React,useState}from\"react\";import classes from'./styles.module.css';import{message}from'antd';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MemeForm=function MemeForm(props){/**\n   * @property {string} memeOwner\n   * stores the value of memeOwner on change in input box\n   * @property {string} caption\n   * caption is stored in caption variable onchange\n   * @property {string} memeUrl \n   */var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),memeOwner=_useState2[0],setMemeOwner=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),caption=_useState4[0],setMemeCaption=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),memeUrl=_useState6[0],setmemeUrl=_useState6[1];var setValue=function setValue(event){switch(event.target.name){case\"owner\":setMemeOwner(event.target.value);break;case\"caption\":setMemeCaption(event.target.value);break;case\"url\":setmemeUrl(event.target.value);break;}};/**\n   * \n   * @param {boolean} error \n   * boolean value to store the error flag of API call \n   * @param {object} response \n   * Input response to check validation\n   */var checkValidation=function checkValidation(error,response){if(!error){return true;}};/**\n   * Clear all the input values on submit\n   */var clearValues=function clearValues(){setMemeOwner('');setMemeCaption('');setmemeUrl('');};var formValidation=function formValidation(){if(memeOwner!==\"\"&&memeUrl!=\"\"&&caption!=\"\"){return true;}else{message.error('All fields are mandatory. Please check again and submit');return false;};};/**\n   * Submit the meme on Submit button to backend\n   */var submitMeme=function submitMeme(){var validation=formValidation();var postData={name:memeOwner,url:memeUrl,caption:caption};if(validation){props.submitMeme(postData);}clearValues();};return/*#__PURE__*/_jsxs(Form,{className:classes['form'],children:[/*#__PURE__*/_jsxs(Form.Field,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Meme Owner\"}),/*#__PURE__*/_jsx(\"input\",{value:memeOwner,name:\"owner\",onChange:setValue,placeholder:\"Enter your full name\"})]}),/*#__PURE__*/_jsxs(Form.Field,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Caption\"}),/*#__PURE__*/_jsx(\"input\",{value:caption,name:\"caption\",onChange:setValue,placeholder:\"Be Creative with caption\"})]}),/*#__PURE__*/_jsxs(Form.Field,{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Meme URL\"}),/*#__PURE__*/_jsx(\"input\",{value:memeUrl,name:\"url\",onChange:setValue,placeholder:\"Enter URL of your meme here\"})]}),/*#__PURE__*/_jsx(Message,{warning:true,header:\"Could you check something!\",list:['That e-mail has been subscribed, but you have not yet clicked the verification link in your e-mail.']}),/*#__PURE__*/_jsx(Button,{onClick:submitMeme,type:\"submit\",children:\"Submit\"})]});};export default MemeForm;","map":{"version":3,"sources":["/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeForm/memeForm.jsx"],"names":["Button","Form","Message","React","useState","classes","message","MemeForm","props","memeOwner","setMemeOwner","caption","setMemeCaption","memeUrl","setmemeUrl","setValue","event","target","name","value","checkValidation","error","response","clearValues","formValidation","submitMeme","validation","postData","url"],"mappings":"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","sourcesContent":["import { Button, Form , Message} from \"semantic-ui-react\";\nimport { React, useState } from \"react\";\nimport classes from './styles.module.css';\nimport {message} from 'antd'\n\n\n\nconst MemeForm = (props) => {\n  /**\n   * @property {string} memeOwner\n   * stores the value of memeOwner on change in input box\n   * @property {string} caption\n   * caption is stored in caption variable onchange\n   * @property {string} memeUrl \n   */\n  const [memeOwner, setMemeOwner] = useState(\"\");\n  const [caption, setMemeCaption] = useState(\"\");\n  const [memeUrl, setmemeUrl] = useState(\"\");\n\n  const setValue = (event) => {\n    switch (event.target.name) {\n      case \"owner\":\n        setMemeOwner(event.target.value);\n        break;\n      case \"caption\":\n        setMemeCaption(event.target.value);\n        break;\n      case \"url\":\n        setmemeUrl(event.target.value);\n        break;\n    }\n  };\n\n  /**\n   * \n   * @param {boolean} error \n   * boolean value to store the error flag of API call \n   * @param {object} response \n   * Input response to check validation\n   */\n  const checkValidation = (error, response)=>{\n    if(!error){\n      return true\n    }\n  }\n\n  /**\n   * Clear all the input values on submit\n   */\n\n  const clearValues = ()=>{\n    setMemeOwner('')\n    setMemeCaption('')\n    setmemeUrl('')\n  }\n\n  const formValidation =()=>{\n    if(memeOwner!==\"\" && memeUrl!=\"\" && caption!=\"\"){\n      return true \n    } else {\n      message.error('All fields are mandatory. Please check again and submit')\n    \n      return false\n    };\n  }\n  /**\n   * Submit the meme on Submit button to backend\n   */\n  const submitMeme = () => {\n    let validation = formValidation();\n    \n    let postData = {name:memeOwner, url:memeUrl,caption:caption}\n    if(validation){\n      props.submitMeme(postData);\n    }\n    \n    clearValues();\n  };\n  return (\n    <Form className={classes['form']}>\n  \n      <Form.Field>\n        <label>Meme Owner</label>\n        <input\n          value={memeOwner}\n          name=\"owner\"\n          onChange={setValue}\n          placeholder=\"Enter your full name\"\n        />\n        \n      </Form.Field>\n      <Form.Field>\n        <label>Caption</label>\n        <input\n          value={caption}\n          name=\"caption\"\n          onChange={setValue}\n          placeholder=\"Be Creative with caption\"\n        />\n      </Form.Field>\n      <Form.Field>\n        <label>Meme URL</label>\n        <input\n          value={memeUrl}\n          name=\"url\"\n          onChange={setValue}\n          placeholder=\"Enter URL of your meme here\"\n        />\n      </Form.Field>\n      <Message\n      warning\n      header='Could you check something!'\n      list={[\n        'That e-mail has been subscribed, but you have not yet clicked the verification link in your e-mail.',\n      ]}\n    />\n      <Button onClick={submitMeme} type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n};\n\nexport default MemeForm;\n"]},"metadata":{},"sourceType":"module"}