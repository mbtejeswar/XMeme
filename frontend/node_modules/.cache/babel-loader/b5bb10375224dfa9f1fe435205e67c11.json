{"ast":null,"code":"var _jsxFileName = \"/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeList/memeList.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport MemeCard from '../memeCard/memeCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MemeList = props => {\n  const {\n    firstHundredMemes\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: firstHundredMemes.length > 0 ? firstHundredMemes.map(meme => /*#__PURE__*/_jsxDEV(MemeCard, {\n      image: meme.url,\n      name: meme.owner,\n      caption: meme.caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 8\n    }, this)) : ''\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_c = MemeList;\nexport default MemeList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemeList\");","map":{"version":3,"sources":["/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeList/memeList.jsx"],"names":["React","useEffect","useState","Grid","MemeCard","MemeList","props","firstHundredMemes","length","map","meme","url","owner","caption"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAQC,IAAR,QAAmB,mBAAnB;AACA,OAAOC,QAAP,MAAqB,sBAArB;;;AAIA,MAAMC,QAAQ,GAAIC,KAAD,IAAS;AAEtB,QAAM;AAACC,IAAAA;AAAD,MAAsBD,KAA5B;AAIA,sBAEI,QAAC,IAAD;AAAA,cACCC,iBAAiB,CAACC,MAAlB,GAA2B,CAA3B,GAA+BD,iBAAiB,CAACE,GAAlB,CAAuBC,IAAD,iBACvD,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,IAAI,CAACC,GAAtB;AAA2B,MAAA,IAAI,EAAED,IAAI,CAACE,KAAtC;AAA6C,MAAA,OAAO,EAAEF,IAAI,CAACG;AAA3D;AAAA;AAAA;AAAA;AAAA,YADiC,CAA/B,GAEE;AAHH;AAAA;AAAA;AAAA;AAAA,UAFJ;AAUH,CAhBD;;KAAMR,Q;AAkBN,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {Grid} from 'semantic-ui-react';\nimport MemeCard from '../memeCard/memeCard';\n\n\n\nconst MemeList = (props)=>{\n\n    const {firstHundredMemes} = props;\n\n\n\n    return(\n        \n        <Grid>\n       { firstHundredMemes.length > 0 ? firstHundredMemes.map((meme)=>(\n       <MemeCard image={meme.url} name={meme.owner} caption={meme.caption} />\n       )) :''}\n        </Grid>\n\n    )\n\n}\n\nexport default MemeList;\n\n\n"]},"metadata":{},"sourceType":"module"}