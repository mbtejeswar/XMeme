{"ast":null,"code":"var _jsxFileName = \"/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeForm/memeForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Form, Message } from \"semantic-ui-react\";\nimport { React, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst submitMeme = () => {};\n\nconst MemeForm = () => {\n  _s();\n\n  const [memeOwner, setMemeOwner] = useState(\"\");\n  const [caption, setMemeCaption] = useState(\"\");\n  const [memeUrl, setmemeUrl] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const setValue = event => {\n    switch (event.target.name) {\n      case \"owner\":\n        setMemeOwner(event.target.value);\n        break;\n\n      case \"caption\":\n        setMemeCaption(event.target.value);\n        break;\n\n      case \"url\":\n        setmemeUrl(event.target.value);\n        break;\n    }\n  };\n\n  const checkValidation = (error, response) => {\n    if (!error) {\n      return true;\n    }\n  };\n\n  const clearValues = () => {\n    setMemeOwner('');\n    setMemeCaption('');\n    setmemeUrl('');\n  };\n\n  const submitMeme = () => {\n    let postData = {\n      owner: memeOwner,\n      url: memeUrl,\n      caption: caption\n    };\n    debugger;\n    console.log(postData);\n    setLoading(true);\n    const memes = fetch(encodeURI(`http://localhost:8080/memes`), {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(postData)\n    }).then(res => {\n      return res.json();\n    }).then(resJSON => {\n      setLoading(false);\n      console.log(resJSON);\n      let valResult = checkValidation(false, resJSON);\n\n      if (valResult) {\n        clearValues();\n        return resJSON;\n      }\n    }).catch(err => {\n      setLoading(false);\n      console.log(`Error occured during fetch api`);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Meme Owner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: memeOwner,\n        name: \"owner\",\n        onChange: setValue,\n        placeholder: \"Enter your full name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Caption\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: caption,\n        name: \"caption\",\n        onChange: setValue,\n        placeholder: \"Be Creative with caption\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Meme URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: memeUrl,\n        name: \"url\",\n        onChange: setValue,\n        placeholder: \"Enter URL of your meme here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      warning: true,\n      header: \"Could you check something!\",\n      list: ['That e-mail has been subscribed, but you have not yet clicked the verification link in your e-mail.']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: submitMeme,\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MemeForm, \"+3svXWRJNBgco5TlYldDwMFjoP8=\");\n\n_c = MemeForm;\nexport default MemeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemeForm\");","map":{"version":3,"sources":["/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeForm/memeForm.jsx"],"names":["Button","Form","Message","React","useState","submitMeme","MemeForm","memeOwner","setMemeOwner","caption","setMemeCaption","memeUrl","setmemeUrl","loading","setLoading","setValue","event","target","name","value","checkValidation","error","response","clearValues","postData","owner","url","console","log","memes","fetch","encodeURI","method","headers","body","JSON","stringify","then","res","json","resJSON","valResult","catch","err"],"mappings":"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","sourcesContent":["import { Button, Form , Message} from \"semantic-ui-react\";\nimport { React, useState } from \"react\";\n\nconst submitMeme = () => {};\n\nconst MemeForm = () => {\n  const [memeOwner, setMemeOwner] = useState(\"\");\n  const [caption, setMemeCaption] = useState(\"\");\n  const [memeUrl, setmemeUrl] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const setValue = (event) => {\n    switch (event.target.name) {\n      case \"owner\":\n        setMemeOwner(event.target.value);\n        break;\n      case \"caption\":\n        setMemeCaption(event.target.value);\n        break;\n      case \"url\":\n        setmemeUrl(event.target.value);\n        break;\n    }\n  };\n\n  const checkValidation = (error, response)=>{\n    if(!error){\n      return true\n    }\n  }\n\n  const clearValues = ()=>{\n    setMemeOwner('')\n    setMemeCaption('')\n    setmemeUrl('')\n  }\n  const submitMeme = () => {\n    let postData = {owner:memeOwner, url:memeUrl,caption:caption}\n    debugger;\n    console.log(postData);\n    setLoading(true);\n    const memes = fetch(encodeURI(`http://localhost:8080/memes`),{method:'post', headers:{'Content-Type': 'application/json'} ,body:JSON.stringify(postData)})\n    .then((res)=>{\n        return res.json();\n    })\n    .then((resJSON)=>{\n      setLoading(false);\n        console.log(resJSON);\n       let valResult =  checkValidation(false,resJSON)\n       if(valResult){\n        clearValues()\n        return resJSON\n       }\n      \n    })\n    .catch((err)=>{\n      setLoading(false);\n      console.log(`Error occured during fetch api`)\n    })\n  };\n  return (\n    <Form>\n  \n      <Form.Field>\n        <label>Meme Owner</label>\n        <input\n          value={memeOwner}\n          name=\"owner\"\n          onChange={setValue}\n          placeholder=\"Enter your full name\"\n        />\n        \n      </Form.Field>\n      <Form.Field>\n        <label>Caption</label>\n        <input\n          value={caption}\n          name=\"caption\"\n          onChange={setValue}\n          placeholder=\"Be Creative with caption\"\n        />\n      </Form.Field>\n      <Form.Field>\n        <label>Meme URL</label>\n        <input\n          value={memeUrl}\n          name=\"url\"\n          onChange={setValue}\n          placeholder=\"Enter URL of your meme here\"\n        />\n      </Form.Field>\n      <Message\n      warning\n      header='Could you check something!'\n      list={[\n        'That e-mail has been subscribed, but you have not yet clicked the verification link in your e-mail.',\n      ]}\n    />\n      <Button onClick={submitMeme} type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n};\n\nexport default MemeForm;\n"]},"metadata":{},"sourceType":"module"}