{"ast":null,"code":"var _jsxFileName = \"/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/main/main.jsx\";\nimport React from \"react\";\nimport MemeCard from \"../memeCard/memeCard\";\nimport MemeList from \"../memeList/memeList\";\nimport MemeForm from \"../memeForm/memeForm\";\nimport { Container } from \"semantic-ui-react\";\nimport classes from \"./styles.module.css\";\nimport Navbar from \"../common/navbar/navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      firstHundredMemes: null\n    };\n\n    this.checkValidation = (error, response) => {\n      if (!error) {\n        return true;\n      }\n    };\n\n    this.fetchFirstHundredMemes = () => {\n      fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`)).then(res => {\n        return res.json();\n      }).then(response => {\n        this.setState({\n          firstHundredMemes: response\n        });\n      }).catch(err => {\n        console.log(`Error occured during fetch ${err}`);\n      });\n    };\n\n    this.submitMeme = async postData => {\n      this.setState({\n        loading: true\n      });\n      const memes = await fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`), {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(postData)\n      }).then(res => {\n        return res.json();\n      }).then(resJSON => {\n        let valResult = this.checkValidation(false, resJSON);\n\n        if (valResult) {\n          // clearValues()\n          return resJSON;\n        }\n      }).catch(err => {\n        this.setState({\n          loading: false\n        });\n        console.log(`Error occured during fetch api`);\n      });\n      this.fetchFirstHundredMemes();\n    };\n  }\n\n  /**\n   * Loading on the initial mount of component\n   */\n  componentDidMount() {\n    this.fetchFirstHundredMemes();\n  }\n  /**\n   * API call to fetch first 100 memes\n   */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes[\"mainContainer\"],\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        items: [\"Login\", \"Register\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.container,\n        children: [/*#__PURE__*/_jsxDEV(MemeForm, {\n          submitMeme: this.submitMeme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.memeListContainer,\n          children: this.state.firstHundredMemes ? /*#__PURE__*/_jsxDEV(MemeList, {\n            firstHundredMemes: this.state.firstHundredMemes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this) : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/main/main.jsx"],"names":["React","MemeCard","MemeList","MemeForm","Container","classes","Navbar","Main","Component","state","loading","firstHundredMemes","checkValidation","error","response","fetchFirstHundredMemes","fetch","encodeURI","then","res","json","setState","catch","err","console","log","submitMeme","postData","memes","method","headers","body","JSON","stringify","resJSON","valResult","componentDidMount","render","container","memeListContainer"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport MemeCard from \"../memeCard/memeCard\";\nimport MemeList from \"../memeList/memeList\";\nimport MemeForm from \"../memeForm/memeForm\";\nimport { Container } from \"semantic-ui-react\";\nimport classes from \"./styles.module.css\";\nimport Navbar from \"../common/navbar/navbar\";\n\nclass Main extends React.Component {\n  /**\n   * @property {boolean} state.loading\n   * Indicates the state of application side effects/API calls\n   * @property {array} state.firstHundredMemes\n   * First Hundred memes will be set to this\n   */\n\n  state = {\n    loading: false,\n    firstHundredMemes: null,\n  };\n  /**\n   *\n   * @param {boolean} error\n   * Boolean value indicating whether any error during the web service call\n   * @param {object} response\n   * Response from the web service\n   */\n  checkValidation = (error, response) => {\n    if (!error) {\n      return true;\n    }\n  };\n  /**\n   * Loading on the initial mount of component\n   */\n  componentDidMount() {\n    this.fetchFirstHundredMemes();\n  }\n  /**\n   * API call to fetch first 100 memes\n   */\n\n  fetchFirstHundredMemes = () => {\n    fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`))\n      .then((res) => {\n        return res.json();\n      })\n      .then((response) => {\n        this.setState({ firstHundredMemes: response });\n      })\n      .catch((err) => {\n        console.log(`Error occured during fetch ${err}`);\n      });\n  };\n\n  /**\n   *\n   * @param {object} postData\n   * gets the data to be sent to backend\n   */\n  submitMeme = async (postData) => {\n    this.setState({ loading: true });\n\n    const memes = await fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`), {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(postData),\n    })\n      .then((res) => {\n        return res.json();\n      })\n      .then((resJSON) => {\n        let valResult = this.checkValidation(false, resJSON);\n        if (valResult) {\n          // clearValues()\n\n          return resJSON;\n        }\n      })\n      .catch((err) => {\n        this.setState({ loading: false });\n        console.log(`Error occured during fetch api`);\n      });\n    this.fetchFirstHundredMemes();\n  };\n\n  render() {\n    return (\n      <div className={classes[\"mainContainer\"]}>\n        <Navbar items={[\"Login\", \"Register\"]} />\n        <div className={classes.container}>\n          <MemeForm submitMeme={this.submitMeme} />\n          <div className={classes.memeListContainer}>\n            {this.state.firstHundredMemes ? (\n              <MemeList firstHundredMemes={this.state.firstHundredMemes} />\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}