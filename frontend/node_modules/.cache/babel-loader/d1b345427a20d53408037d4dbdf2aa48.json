{"ast":null,"code":"var _jsxFileName = \"/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/main/main.jsx\";\nimport React from 'react';\nimport MemeCard from '../memeCard/memeCard';\nimport MemeList from '../memeList/memeList';\nimport MemeForm from '../memeForm/memeForm';\nimport { Container } from 'semantic-ui-react';\nimport classes from './styles.module.css';\nimport Navbar from '../common/navbar/navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      firstHundredMemes: null\n    };\n\n    this.checkValidation = (error, response) => {\n      if (!error) {\n        return true;\n      }\n    };\n\n    this.fetchFirstHundredMemes = () => {\n      fetch(encodeURI(`http://localhost:8081/memes`)).then(res => {\n        return res.json();\n      }).then(response => {\n        this.setState({\n          firstHundredMemes: response\n        });\n      }).catch(err => {\n        console.log(`Error occured during fetch ${err}`);\n      });\n    };\n\n    this.submitMeme = async postData => {\n      this.setState({\n        loading: true\n      });\n      const memes = await fetch(encodeURI(`http://localhost:8081/memes`), {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n      }).then(res => {\n        return res.json();\n      }).then(resJSON => {\n        let valResult = this.checkValidation(false, resJSON);\n\n        if (valResult) {\n          // clearValues()\n          return resJSON;\n        }\n      }).catch(err => {\n        this.setState({\n          loading: false\n        });\n        console.log(`Error occured during fetch api`);\n      });\n      this.fetchFirstHundredMemes();\n    };\n  }\n\n  componentDidMount() {\n    this.fetchFirstHundredMemes();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes['mainContainer'],\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        items: ['Login', 'Register']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.container,\n        children: [/*#__PURE__*/_jsxDEV(MemeForm, {\n          submitMeme: this.submitMeme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.memeListContainer,\n          children: this.state.firstHundredMemes ? /*#__PURE__*/_jsxDEV(MemeList, {\n            firstHundredMemes: this.state.firstHundredMemes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 54\n          }, this) : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/main/main.jsx"],"names":["React","MemeCard","MemeList","MemeForm","Container","classes","Navbar","Main","Component","state","loading","firstHundredMemes","checkValidation","error","response","fetchFirstHundredMemes","fetch","encodeURI","then","res","json","setState","catch","err","console","log","submitMeme","postData","memes","method","headers","body","JSON","stringify","resJSON","valResult","componentDidMount","render","container","memeListContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MemeCard from '../memeCard/memeCard';\nimport MemeList from '../memeList/memeList';\nimport MemeForm from '../memeForm/memeForm';\nimport {Container}  from 'semantic-ui-react';\nimport classes from './styles.module.css';\nimport Navbar from '../common/navbar/navbar';\n\n\nclass Main extends React.Component{\n\n    state={\n       loading:false,\n       firstHundredMemes:null\n    }\n\n    checkValidation = (error, response)=>{\n        if(!error){\n          return true\n        }\n      }\n    componentDidMount(){\n        this.fetchFirstHundredMemes();\n\n     \n\n    }\n\n     fetchFirstHundredMemes = ()=>{\n        fetch(encodeURI(`http://localhost:8081/memes`))\n        .then((res)=>{\n          return res.json()\n        })\n        .then((response)=>{\n            this.setState({firstHundredMemes:response});\n        })\n        .catch((err)=>{\n            console.log(`Error occured during fetch ${err}`);\n        })\n\n    }\n\n    // componentDidUpdate(){\n    //     this.fetchFirstHundredMemes();\n    // }\n    submitMeme = async (postData)=>{\n     \n        this.setState({loading:true});\n\n        const memes = await fetch(encodeURI(`http://localhost:8081/memes`),{method:'post', headers:{'Content-Type': 'application/json'} ,body:JSON.stringify(postData)})\n        .then((res)=>{\n            return res.json();\n        })\n        .then((resJSON)=>{\n            \n           let valResult =  this.checkValidation(false,resJSON)\n           if(valResult){\n            // clearValues()\n          \n            return resJSON\n           }\n          \n        })\n        .catch((err)=>{\n            this.setState({loading:false});\n          console.log(`Error occured during fetch api`)\n        })\n        this.fetchFirstHundredMemes();\n    }\n\n\n  \n        render(){\n\n            return(\n                <div className={classes['mainContainer']}>\n                    <Navbar items={['Login', 'Register']} />\n                    <div className={classes.container}>\n                    <MemeForm submitMeme = {this.submitMeme} />\n                    <div className={classes.memeListContainer}>\n                    {this.state.firstHundredMemes ?  <MemeList firstHundredMemes={this.state.firstHundredMemes}/> :''}\n                    </div>\n                   </div>\n                </div>\n            )\n\n        }\n    \n\n}\n\nexport default Main;\n\n\n"]},"metadata":{},"sourceType":"module"}