{"ast":null,"code":"import _regeneratorRuntime from\"/home/tejeswar/VS_Workspace/XMeme/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/tejeswar/VS_Workspace/XMeme/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/tejeswar/VS_Workspace/XMeme/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/tejeswar/VS_Workspace/XMeme/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/tejeswar/VS_Workspace/XMeme/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/tejeswar/VS_Workspace/XMeme/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import MemeCard from\"../memeCard/memeCard\";import MemeList from\"../memeList/memeList\";import MemeForm from\"../memeForm/memeForm\";import{Container}from\"semantic-ui-react\";import classes from\"./styles.module.css\";import Navbar from\"../common/navbar/navbar\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Main=/*#__PURE__*/function(_React$Component){_inherits(Main,_React$Component);var _super=_createSuper(Main);function Main(){var _this;_classCallCheck(this,Main);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={loading:false,firstHundredMemes:null};_this.checkValidation=function(error,response){if(!error){return true;}};_this.fetchFirstHundredMemes=function(){fetch(encodeURI(\"https://xmemeapps.herokuapp.com/memes\")).then(function(res){return res.json();}).then(function(response){_this.setState({firstHundredMemes:response});}).catch(function(err){console.log(\"Error occured during fetch \".concat(err));});};_this.submitMeme=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(postData){var memes;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_this.setState({loading:true});_context.next=3;return fetch(encodeURI(\"https://xmemeapps.herokuapp.com/memes\"),{method:\"post\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(postData)}).then(function(res){return res.json();}).then(function(resJSON){var valResult=_this.checkValidation(false,resJSON);if(valResult){// clearValues()\nreturn resJSON;}}).catch(function(err){_this.setState({loading:false});console.log(\"Error occured during fetch api\");});case 3:memes=_context.sent;_this.fetchFirstHundredMemes();case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();return _this;}_createClass(Main,[{key:\"componentDidMount\",value:/**\n   * Loading on the initial mount of component\n   */function componentDidMount(){this.fetchFirstHundredMemes();}/**\n   * API call to fetch first 100 memes\n   */},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{className:classes[\"mainContainer\"],children:[/*#__PURE__*/_jsx(Navbar,{items:[\"Login\",\"Register\"]}),/*#__PURE__*/_jsxs(\"div\",{className:classes.container,children:[/*#__PURE__*/_jsx(MemeForm,{submitMeme:this.submitMeme}),/*#__PURE__*/_jsx(\"div\",{className:classes.memeListContainer,children:this.state.firstHundredMemes?/*#__PURE__*/_jsx(MemeList,{firstHundredMemes:this.state.firstHundredMemes}):\"\"})]})]});}}]);return Main;}(React.Component);export default Main;","map":{"version":3,"sources":["/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/main/main.jsx"],"names":["React","MemeCard","MemeList","MemeForm","Container","classes","Navbar","Main","state","loading","firstHundredMemes","checkValidation","error","response","fetchFirstHundredMemes","fetch","encodeURI","then","res","json","setState","catch","err","console","log","submitMeme","postData","method","headers","body","JSON","stringify","resJSON","valResult","memes","container","memeListContainer","Component"],"mappings":"m7BAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,CACA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,CACA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,CACA,OAASC,SAAT,KAA0B,mBAA1B,CACA,MAAOC,CAAAA,OAAP,KAAoB,qBAApB,CACA,MAAOC,CAAAA,MAAP,KAAmB,yBAAnB,C,2FAEMC,CAAAA,I,+TAQJC,K,CAAQ,CACNC,OAAO,CAAE,KADH,CAENC,iBAAiB,CAAE,IAFb,C,OAWRC,e,CAAkB,SAACC,KAAD,CAAQC,QAAR,CAAqB,CACrC,GAAI,CAACD,KAAL,CAAY,CACV,MAAO,KAAP,CACD,CACF,C,OAWDE,sB,CAAyB,UAAM,CAC7BC,KAAK,CAACC,SAAS,yCAAV,CAAL,CACGC,IADH,CACQ,SAACC,GAAD,CAAS,CACb,MAAOA,CAAAA,GAAG,CAACC,IAAJ,EAAP,CACD,CAHH,EAIGF,IAJH,CAIQ,SAACJ,QAAD,CAAc,CAClB,MAAKO,QAAL,CAAc,CAAEV,iBAAiB,CAAEG,QAArB,CAAd,EACD,CANH,EAOGQ,KAPH,CAOS,SAACC,GAAD,CAAS,CACdC,OAAO,CAACC,GAAR,sCAA0CF,GAA1C,GACD,CATH,EAUD,C,OAODG,U,0FAAa,iBAAOC,QAAP,4HACX,MAAKN,QAAL,CAAc,CAAEX,OAAO,CAAE,IAAX,CAAd,EADW,sBAGSM,CAAAA,KAAK,CAACC,SAAS,yCAAV,CAAqD,CAC5EW,MAAM,CAAE,MADoE,CAE5EC,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAFmE,CAG5EC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAHsE,CAArD,CAAL,CAKjBT,IALiB,CAKZ,SAACC,GAAD,CAAS,CACb,MAAOA,CAAAA,GAAG,CAACC,IAAJ,EAAP,CACD,CAPiB,EAQjBF,IARiB,CAQZ,SAACe,OAAD,CAAa,CACjB,GAAIC,CAAAA,SAAS,CAAG,MAAKtB,eAAL,CAAqB,KAArB,CAA4BqB,OAA5B,CAAhB,CACA,GAAIC,SAAJ,CAAe,CACb;AAEA,MAAOD,CAAAA,OAAP,CACD,CACF,CAfiB,EAgBjBX,KAhBiB,CAgBX,SAACC,GAAD,CAAS,CACd,MAAKF,QAAL,CAAc,CAAEX,OAAO,CAAE,KAAX,CAAd,EACAc,OAAO,CAACC,GAAR,mCACD,CAnBiB,CAHT,QAGLU,KAHK,eAuBX,MAAKpB,sBAAL,GAvBW,sD,+HA5Bb;AACF;AACA,KACE,4BAAoB,CAClB,KAAKA,sBAAL,GACD,CACD;AACF;AACA,K,sBA8CE,iBAAS,CACP,mBACE,aAAK,SAAS,CAAET,OAAO,CAAC,eAAD,CAAvB,wBACE,KAAC,MAAD,EAAQ,KAAK,CAAE,CAAC,OAAD,CAAU,UAAV,CAAf,EADF,cAEE,aAAK,SAAS,CAAEA,OAAO,CAAC8B,SAAxB,wBACE,KAAC,QAAD,EAAU,UAAU,CAAE,KAAKV,UAA3B,EADF,cAEE,YAAK,SAAS,CAAEpB,OAAO,CAAC+B,iBAAxB,UACG,KAAK5B,KAAL,CAAWE,iBAAX,cACC,KAAC,QAAD,EAAU,iBAAiB,CAAE,KAAKF,KAAL,CAAWE,iBAAxC,EADD,CAGC,EAJJ,EAFF,GAFF,GADF,CAeD,C,kBA9FgBV,KAAK,CAACqC,S,EAiGzB,cAAe9B,CAAAA,IAAf","sourcesContent":["import React from \"react\";\nimport MemeCard from \"../memeCard/memeCard\";\nimport MemeList from \"../memeList/memeList\";\nimport MemeForm from \"../memeForm/memeForm\";\nimport { Container } from \"semantic-ui-react\";\nimport classes from \"./styles.module.css\";\nimport Navbar from \"../common/navbar/navbar\";\n\nclass Main extends React.Component {\n  /**\n   * @property {boolean} state.loading\n   * Indicates the state of application side effects/API calls\n   * @property {array} state.firstHundredMemes\n   * First Hundred memes will be set to this\n   */\n\n  state = {\n    loading: false,\n    firstHundredMemes: null,\n  };\n  /**\n   *\n   * @param {boolean} error\n   * Boolean value indicating whether any error during the web service call\n   * @param {object} response\n   * Response from the web service\n   */\n  checkValidation = (error, response) => {\n    if (!error) {\n      return true;\n    }\n  };\n  /**\n   * Loading on the initial mount of component\n   */\n  componentDidMount() {\n    this.fetchFirstHundredMemes();\n  }\n  /**\n   * API call to fetch first 100 memes\n   */\n\n  fetchFirstHundredMemes = () => {\n    fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`))\n      .then((res) => {\n        return res.json();\n      })\n      .then((response) => {\n        this.setState({ firstHundredMemes: response });\n      })\n      .catch((err) => {\n        console.log(`Error occured during fetch ${err}`);\n      });\n  };\n\n  /**\n   *\n   * @param {object} postData\n   * gets the data to be sent to backend\n   */\n  submitMeme = async (postData) => {\n    this.setState({ loading: true });\n\n    const memes = await fetch(encodeURI(`https://xmemeapps.herokuapp.com/memes`), {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(postData),\n    })\n      .then((res) => {\n        return res.json();\n      })\n      .then((resJSON) => {\n        let valResult = this.checkValidation(false, resJSON);\n        if (valResult) {\n          // clearValues()\n\n          return resJSON;\n        }\n      })\n      .catch((err) => {\n        this.setState({ loading: false });\n        console.log(`Error occured during fetch api`);\n      });\n    this.fetchFirstHundredMemes();\n  };\n\n  render() {\n    return (\n      <div className={classes[\"mainContainer\"]}>\n        <Navbar items={[\"Login\", \"Register\"]} />\n        <div className={classes.container}>\n          <MemeForm submitMeme={this.submitMeme} />\n          <div className={classes.memeListContainer}>\n            {this.state.firstHundredMemes ? (\n              <MemeList firstHundredMemes={this.state.firstHundredMemes} />\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}