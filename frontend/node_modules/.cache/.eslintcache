[{"/home/tejeswar/VS_Workspace/XMeme/frontend/src/index.js":"1","/home/tejeswar/VS_Workspace/XMeme/frontend/src/App.js":"2","/home/tejeswar/VS_Workspace/XMeme/frontend/src/reportWebVitals.js":"3","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeForm/memeForm.jsx":"4","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeList/memeList.jsx":"5","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeCard/memeCard.jsx":"6","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/main/main.jsx":"7","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/common/navbar/navbar.jsx":"8"},{"size":500,"mtime":1612507170002,"results":"9","hashOfConfig":"10"},{"size":333,"mtime":1613143181236,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1612507170002,"results":"12","hashOfConfig":"10"},{"size":2894,"mtime":1613143236800,"results":"13","hashOfConfig":"10"},{"size":519,"mtime":1613070945121,"results":"14","hashOfConfig":"10"},{"size":1112,"mtime":1613201043849,"results":"15","hashOfConfig":"10"},{"size":2702,"mtime":1613143663557,"results":"16","hashOfConfig":"10"},{"size":545,"mtime":1612943683372,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"d07ls0",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"/home/tejeswar/VS_Workspace/XMeme/frontend/src/index.js",[],["40","41"],"/home/tejeswar/VS_Workspace/XMeme/frontend/src/App.js",["42","43"],"import MemeForm from './components/memeForm/memeForm';\nimport 'semantic-ui-css/semantic.min.css'\nimport MemeList from './components/memeList/memeList';\nimport Main from './components/main/main';\nimport 'antd/dist/antd.css'; \nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","/home/tejeswar/VS_Workspace/XMeme/frontend/src/reportWebVitals.js",[],"/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeForm/memeForm.jsx",["44","45","46","47"],"import { Button, Form , Message} from \"semantic-ui-react\";\nimport { React, useState } from \"react\";\nimport classes from './styles.module.css';\nimport {message} from 'antd'\n\n\n\nconst MemeForm = (props) => {\n  /**\n   * @property {string} memeOwner\n   * stores the value of memeOwner on change in input box\n   * @property {string} caption\n   * caption is stored in caption variable onchange\n   * @property {string} memeUrl \n   */\n  const [memeOwner, setMemeOwner] = useState(\"\");\n  const [caption, setMemeCaption] = useState(\"\");\n  const [memeUrl, setmemeUrl] = useState(\"\");\n\n  const setValue = (event) => {\n    switch (event.target.name) {\n      case \"owner\":\n        setMemeOwner(event.target.value);\n        break;\n      case \"caption\":\n        setMemeCaption(event.target.value);\n        break;\n      case \"url\":\n        setmemeUrl(event.target.value);\n        break;\n    }\n  };\n\n  /**\n   * \n   * @param {boolean} error \n   * boolean value to store the error flag of API call \n   * @param {object} response \n   * Input response to check validation\n   */\n  const checkValidation = (error, response)=>{\n    if(!error){\n      return true\n    }\n  }\n\n  /**\n   * Clear all the input values on submit\n   */\n\n  const clearValues = ()=>{\n    setMemeOwner('')\n    setMemeCaption('')\n    setmemeUrl('')\n  }\n\n  const formValidation =()=>{\n    if(memeOwner!==\"\" && memeUrl!=\"\" && caption!=\"\"){\n      return true \n    } else {\n      message.error('All fields are mandatory. Please check again and submit')\n    \n      return false\n    };\n  }\n  /**\n   * Submit the meme on Submit button to backend\n   */\n  const submitMeme = () => {\n    let validation = formValidation();\n    \n    let postData = {name:memeOwner, url:memeUrl,caption:caption}\n    if(validation){\n      props.submitMeme(postData);\n    }\n    \n    clearValues();\n  };\n  return (\n    <Form className={classes['form']}>\n  \n      <Form.Field>\n        <label>Meme Owner</label>\n        <input\n          value={memeOwner}\n          name=\"owner\"\n          onChange={setValue}\n          placeholder=\"Enter your full name\"\n        />\n        \n      </Form.Field>\n      <Form.Field>\n        <label>Caption</label>\n        <input\n          value={caption}\n          name=\"caption\"\n          onChange={setValue}\n          placeholder=\"Be Creative with caption\"\n        />\n      </Form.Field>\n      <Form.Field>\n        <label>Meme URL</label>\n        <input\n          value={memeUrl}\n          name=\"url\"\n          onChange={setValue}\n          placeholder=\"Enter URL of your meme here\"\n        />\n      </Form.Field>\n      <Message\n      warning\n      header='Could you check something!'\n      list={[\n        'That e-mail has been subscribed, but you have not yet clicked the verification link in your e-mail.',\n      ]}\n    />\n      <Button onClick={submitMeme} type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n};\n\nexport default MemeForm;\n","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeList/memeList.jsx",["48","49"],"import React, { useEffect, useState } from 'react';\nimport {Grid} from 'semantic-ui-react';\nimport MemeCard from '../memeCard/memeCard';\n\n\n\nconst MemeList = (props)=>{\n\n    const {firstHundredMemes} = props;\n\n\n\n    return(\n        \n        <Grid  width={16} >  \n        \n       { firstHundredMemes.length > 0 ? firstHundredMemes.map((meme)=>(\n        \n       \n       <MemeCard image={meme.url} name={meme.name} caption={meme.caption} />\n    \n       )) :''}\n       \n        </Grid>\n\n    )\n\n}\n\nexport default MemeList;\n\n\n","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeCard/memeCard.jsx",[],"/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/main/main.jsx",["50","51","52"],"import React from \"react\";\nimport MemeCard from \"../memeCard/memeCard\";\nimport MemeList from \"../memeList/memeList\";\nimport MemeForm from \"../memeForm/memeForm\";\nimport { Container } from \"semantic-ui-react\";\nimport classes from \"./styles.module.css\";\nimport Navbar from \"../common/navbar/navbar\";\n\nclass Main extends React.Component {\n  /**\n   * @property {boolean} state.loading\n   * Indicates the state of application side effects/API calls\n   * @property {array} state.firstHundredMemes\n   * First Hundred memes will be set to this\n   */\n\n  state = {\n    loading: false,\n    firstHundredMemes: null,\n  };\n  /**\n   *\n   * @param {boolean} error\n   * Boolean value indicating whether any error during the web service call\n   * @param {object} response\n   * Response from the web service\n   */\n  checkValidation = (error, response) => {\n    if (!error) {\n      return true;\n    }\n  };\n  /**\n   * Loading on the initial mount of component\n   */\n  componentDidMount() {\n    this.fetchFirstHundredMemes();\n  }\n  /**\n   * API call to fetch first 100 memes\n   */\n\n  fetchFirstHundredMemes = () => {\n    fetch(encodeURI(`http://localhost:8081/memes`))\n      .then((res) => {\n        return res.json();\n      })\n      .then((response) => {\n        this.setState({ firstHundredMemes: response });\n      })\n      .catch((err) => {\n        console.log(`Error occured during fetch ${err}`);\n      });\n  };\n\n  /**\n   *\n   * @param {object} postData\n   * gets the data to be sent to backend\n   */\n  submitMeme = async (postData) => {\n    this.setState({ loading: true });\n\n    const memes = await fetch(encodeURI(`http://localhost:8081/memes`), {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(postData),\n    })\n      .then((res) => {\n        return res.json();\n      })\n      .then((resJSON) => {\n        let valResult = this.checkValidation(false, resJSON);\n        if (valResult) {\n          // clearValues()\n\n          return resJSON;\n        }\n      })\n      .catch((err) => {\n        this.setState({ loading: false });\n        console.log(`Error occured during fetch api`);\n      });\n    this.fetchFirstHundredMemes();\n  };\n\n  render() {\n    return (\n      <div className={classes[\"mainContainer\"]}>\n        <Navbar items={[\"Login\", \"Register\"]} />\n        <div className={classes.container}>\n          <MemeForm submitMeme={this.submitMeme} />\n          <div className={classes.memeListContainer}>\n            {this.state.firstHundredMemes ? (\n              <MemeList firstHundredMemes={this.state.firstHundredMemes} />\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/common/navbar/navbar.jsx",["53","54","55","56","57"],"import React from 'react';\nimport {\n    Container,\n    Icon,\n    Image,\n    Menu,\n    Sidebar,\n    Responsive\n  } from \"semantic-ui-react\";\n\n\nconst navbar = (props)=>{\n\n    return(\n\n        <Menu fixed=\"top\" inverted>\n        <Menu.Item>\n          XMeme\n        </Menu.Item>\n        <Menu.Item onClick={props.onToggle}>\n         \n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n          {/* {props.items.map(props.rightItems, item => <Menu.Item {...item} />)} */}\n        </Menu.Menu>\n      </Menu>\n\n    )\n\n\n\n}\n\nexport default navbar;",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":1,"column":8,"nodeType":"64","messageId":"65","endLine":1,"endColumn":16},{"ruleId":"62","severity":1,"message":"66","line":3,"column":8,"nodeType":"64","messageId":"65","endLine":3,"endColumn":16},{"ruleId":"67","severity":1,"message":"68","line":21,"column":5,"nodeType":"69","messageId":"70","endLine":31,"endColumn":6},{"ruleId":"62","severity":1,"message":"71","line":41,"column":9,"nodeType":"64","messageId":"65","endLine":41,"endColumn":24},{"ruleId":"72","severity":1,"message":"73","line":58,"column":33,"nodeType":"74","messageId":"75","endLine":58,"endColumn":35},{"ruleId":"72","severity":1,"message":"73","line":58,"column":48,"nodeType":"74","messageId":"75","endLine":58,"endColumn":50},{"ruleId":"62","severity":1,"message":"76","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":26},{"ruleId":"62","severity":1,"message":"77","line":1,"column":28,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"62","severity":1,"message":"78","line":2,"column":8,"nodeType":"64","messageId":"65","endLine":2,"endColumn":16},{"ruleId":"62","severity":1,"message":"79","line":5,"column":10,"nodeType":"64","messageId":"65","endLine":5,"endColumn":19},{"ruleId":"62","severity":1,"message":"80","line":64,"column":11,"nodeType":"64","messageId":"65","endLine":64,"endColumn":16},{"ruleId":"62","severity":1,"message":"79","line":3,"column":5,"nodeType":"64","messageId":"65","endLine":3,"endColumn":14},{"ruleId":"62","severity":1,"message":"81","line":4,"column":5,"nodeType":"64","messageId":"65","endLine":4,"endColumn":9},{"ruleId":"62","severity":1,"message":"82","line":5,"column":5,"nodeType":"64","messageId":"65","endLine":5,"endColumn":10},{"ruleId":"62","severity":1,"message":"83","line":7,"column":5,"nodeType":"64","messageId":"65","endLine":7,"endColumn":12},{"ruleId":"62","severity":1,"message":"84","line":8,"column":5,"nodeType":"64","messageId":"65","endLine":8,"endColumn":15},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'MemeForm' is defined but never used.","Identifier","unusedVar","'MemeList' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'checkValidation' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'useState' is defined but never used.","'MemeCard' is defined but never used.","'Container' is defined but never used.","'memes' is assigned a value but never used.","'Icon' is defined but never used.","'Image' is defined but never used.","'Sidebar' is defined but never used.","'Responsive' is defined but never used.","no-global-assign","no-unsafe-negation"]