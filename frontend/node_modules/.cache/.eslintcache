[{"/home/tejeswar/VS_Workspace/XMeme/frontend/src/index.js":"1","/home/tejeswar/VS_Workspace/XMeme/frontend/src/App.js":"2","/home/tejeswar/VS_Workspace/XMeme/frontend/src/reportWebVitals.js":"3","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeForm/memeForm.jsx":"4","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeList/memeList.jsx":"5","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeCard/memeCard.jsx":"6","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/main/main.jsx":"7"},{"size":500,"mtime":1612507170002,"results":"8","hashOfConfig":"9"},{"size":303,"mtime":1612681650810,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1612507170002,"results":"11","hashOfConfig":"9"},{"size":1987,"mtime":1612720712770,"results":"12","hashOfConfig":"9"},{"size":478,"mtime":1612694717571,"results":"13","hashOfConfig":"9"},{"size":409,"mtime":1612674980749,"results":"14","hashOfConfig":"9"},{"size":2060,"mtime":1612721251461,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"d07ls0",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/home/tejeswar/VS_Workspace/XMeme/frontend/src/index.js",[],["35","36"],"/home/tejeswar/VS_Workspace/XMeme/frontend/src/App.js",["37","38"],"import MemeForm from './components/memeForm/memeForm';\nimport 'semantic-ui-css/semantic.min.css'\nimport MemeList from './components/memeList/memeList';\nimport Main from './components/main/main';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","/home/tejeswar/VS_Workspace/XMeme/frontend/src/reportWebVitals.js",[],"/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeForm/memeForm.jsx",["39","40","41"],"import { Button, Form , Message} from \"semantic-ui-react\";\nimport { React, useState } from \"react\";\n\n// const submitMeme = () => {};\n\nconst MemeForm = (props) => {\n  const [memeOwner, setMemeOwner] = useState(\"\");\n  const [caption, setMemeCaption] = useState(\"\");\n  const [memeUrl, setmemeUrl] = useState(\"\");\n\n  const setValue = (event) => {\n    switch (event.target.name) {\n      case \"owner\":\n        setMemeOwner(event.target.value);\n        break;\n      case \"caption\":\n        setMemeCaption(event.target.value);\n        break;\n      case \"url\":\n        setmemeUrl(event.target.value);\n        break;\n    }\n  };\n\n  const checkValidation = (error, response)=>{\n    if(!error){\n      return true\n    }\n  }\n\n  const clearValues = ()=>{\n    setMemeOwner('')\n    setMemeCaption('')\n    setmemeUrl('')\n  }\n  const submitMeme = () => {\n    let postData = {name:memeOwner, url:memeUrl,caption:caption}\n    props.submitMeme(postData);\n  };\n  return (\n    <Form>\n  \n      <Form.Field>\n        <label>Meme Owner</label>\n        <input\n          value={memeOwner}\n          name=\"owner\"\n          onChange={setValue}\n          placeholder=\"Enter your full name\"\n        />\n        \n      </Form.Field>\n      <Form.Field>\n        <label>Caption</label>\n        <input\n          value={caption}\n          name=\"caption\"\n          onChange={setValue}\n          placeholder=\"Be Creative with caption\"\n        />\n      </Form.Field>\n      <Form.Field>\n        <label>Meme URL</label>\n        <input\n          value={memeUrl}\n          name=\"url\"\n          onChange={setValue}\n          placeholder=\"Enter URL of your meme here\"\n        />\n      </Form.Field>\n      <Message\n      warning\n      header='Could you check something!'\n      list={[\n        'That e-mail has been subscribed, but you have not yet clicked the verification link in your e-mail.',\n      ]}\n    />\n      <Button onClick={submitMeme} type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n};\n\nexport default MemeForm;\n","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeList/memeList.jsx",["42","43"],"import React, { useEffect, useState } from 'react';\nimport {Grid} from 'semantic-ui-react';\nimport MemeCard from '../memeCard/memeCard';\n\n\n\nconst MemeList = (props)=>{\n    debugger;\n    const {firstHundredMemes} = props;\n\n\n\n    return(\n       \n        <Grid>\n       { firstHundredMemes.length > 0 ? firstHundredMemes.map((meme)=>(\n       <MemeCard image={meme.url} name={meme.owner} caption={meme.caption} />\n       )) :''}\n        </Grid>\n\n    )\n\n}\n\nexport default MemeList;\n\n\n","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeCard/memeCard.jsx",[],"/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/main/main.jsx",["44","45","46"],"import React from 'react';\nimport MemeCard from '../memeCard/memeCard';\nimport MemeList from '../memeList/memeList';\nimport MemeForm from '../memeForm/memeForm';\nimport {Container}  from 'semantic-ui-react';\n\n\nclass Main extends React.Component{\n\n    state={\n       loading:false,\n       firstHundredMemes:null\n    }\n\n    checkValidation = (error, response)=>{\n        if(!error){\n          return true\n        }\n      }\n    componentDidMount(){\n        debugger;\n        this.fetchFirstHundredMemes();\n\n     \n\n    }\n\n     fetchFirstHundredMemes = ()=>{\n        fetch(encodeURI(`http://localhost:8080/memes`))\n        .then((res)=>{\n          return res.json()\n        })\n        .then((response)=>{\n            this.setState({firstHundredMemes:response});\n        })\n        .catch((err)=>{\n            console.log(`Error occured during fetch ${err}`);\n        })\n\n    }\n\n    // componentDidUpdate(){\n    //     this.fetchFirstHundredMemes();\n    // }\n    submitMeme = async (postData)=>{\n        debugger;\n        this.setState({loading:true});\n        debugger;\n        const memes = await fetch(encodeURI(`http://localhost:8080/memes`),{method:'post', headers:{'Content-Type': 'application/json'} ,body:JSON.stringify(postData)})\n        .then((res)=>{\n            return res.json();\n        })\n        .then((resJSON)=>{\n            \n           let valResult =  this.checkValidation(false,resJSON)\n           if(valResult){\n            // clearValues()\n          \n            return resJSON\n           }\n          \n        })\n        .catch((err)=>{\n            this.setState({loading:false});\n          console.log(`Error occured during fetch api`)\n        })\n        this.fetchFirstHundredMemes();\n    }\n\n\n  \n        render(){\n\n            return(\n                <div>\n                    <MemeForm submitMeme = {this.submitMeme} />\n                    {this.state.firstHundredMemes ?  <MemeList firstHundredMemes={this.state.firstHundredMemes}/> :''}\n                   \n                </div>\n            )\n\n        }\n    \n\n}\n\nexport default Main;\n\n\n",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":16},{"ruleId":"51","severity":1,"message":"55","line":3,"column":8,"nodeType":"53","messageId":"54","endLine":3,"endColumn":16},{"ruleId":"56","severity":1,"message":"57","line":12,"column":5,"nodeType":"58","messageId":"59","endLine":22,"endColumn":6},{"ruleId":"51","severity":1,"message":"60","line":25,"column":9,"nodeType":"53","messageId":"54","endLine":25,"endColumn":24},{"ruleId":"51","severity":1,"message":"61","line":31,"column":9,"nodeType":"53","messageId":"54","endLine":31,"endColumn":20},{"ruleId":"51","severity":1,"message":"62","line":1,"column":17,"nodeType":"53","messageId":"54","endLine":1,"endColumn":26},{"ruleId":"51","severity":1,"message":"63","line":1,"column":28,"nodeType":"53","messageId":"54","endLine":1,"endColumn":36},{"ruleId":"51","severity":1,"message":"64","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":16},{"ruleId":"51","severity":1,"message":"65","line":5,"column":9,"nodeType":"53","messageId":"54","endLine":5,"endColumn":18},{"ruleId":"51","severity":1,"message":"66","line":49,"column":15,"nodeType":"53","messageId":"54","endLine":49,"endColumn":20},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'MemeForm' is defined but never used.","Identifier","unusedVar","'MemeList' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'checkValidation' is assigned a value but never used.","'clearValues' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'MemeCard' is defined but never used.","'Container' is defined but never used.","'memes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]