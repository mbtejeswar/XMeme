[{"/home/tejeswar/VS_Workspace/XMeme/frontend/src/index.js":"1","/home/tejeswar/VS_Workspace/XMeme/frontend/src/App.js":"2","/home/tejeswar/VS_Workspace/XMeme/frontend/src/reportWebVitals.js":"3","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeForm/memeForm.jsx":"4","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeList/memeList.jsx":"5","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeCard/memeCard.jsx":"6","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/main/main.jsx":"7"},{"size":500,"mtime":1612507170002,"results":"8","hashOfConfig":"9"},{"size":303,"mtime":1612681650810,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1612507170002,"results":"11","hashOfConfig":"9"},{"size":1988,"mtime":1612686755790,"results":"12","hashOfConfig":"9"},{"size":823,"mtime":1612687035600,"results":"13","hashOfConfig":"9"},{"size":409,"mtime":1612674980749,"results":"14","hashOfConfig":"9"},{"size":1345,"mtime":1612686815082,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"d07ls0",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/home/tejeswar/VS_Workspace/XMeme/frontend/src/index.js",[],["34","35"],"/home/tejeswar/VS_Workspace/XMeme/frontend/src/App.js",["36","37"],"import MemeForm from './components/memeForm/memeForm';\nimport 'semantic-ui-css/semantic.min.css'\nimport MemeList from './components/memeList/memeList';\nimport Main from './components/main/main';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","/home/tejeswar/VS_Workspace/XMeme/frontend/src/reportWebVitals.js",[],"/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeForm/memeForm.jsx",["38","39","40"],"import { Button, Form , Message} from \"semantic-ui-react\";\nimport { React, useState } from \"react\";\n\n// const submitMeme = () => {};\n\nconst MemeForm = (props) => {\n  const [memeOwner, setMemeOwner] = useState(\"\");\n  const [caption, setMemeCaption] = useState(\"\");\n  const [memeUrl, setmemeUrl] = useState(\"\");\n\n  const setValue = (event) => {\n    switch (event.target.name) {\n      case \"owner\":\n        setMemeOwner(event.target.value);\n        break;\n      case \"caption\":\n        setMemeCaption(event.target.value);\n        break;\n      case \"url\":\n        setmemeUrl(event.target.value);\n        break;\n    }\n  };\n\n  const checkValidation = (error, response)=>{\n    if(!error){\n      return true\n    }\n  }\n\n  const clearValues = ()=>{\n    setMemeOwner('')\n    setMemeCaption('')\n    setmemeUrl('')\n  }\n  const submitMeme = () => {\n    let postData = {owner:memeOwner, url:memeUrl,caption:caption}\n    props.submitMeme(postData);\n  };\n  return (\n    <Form>\n  \n      <Form.Field>\n        <label>Meme Owner</label>\n        <input\n          value={memeOwner}\n          name=\"owner\"\n          onChange={setValue}\n          placeholder=\"Enter your full name\"\n        />\n        \n      </Form.Field>\n      <Form.Field>\n        <label>Caption</label>\n        <input\n          value={caption}\n          name=\"caption\"\n          onChange={setValue}\n          placeholder=\"Be Creative with caption\"\n        />\n      </Form.Field>\n      <Form.Field>\n        <label>Meme URL</label>\n        <input\n          value={memeUrl}\n          name=\"url\"\n          onChange={setValue}\n          placeholder=\"Enter URL of your meme here\"\n        />\n      </Form.Field>\n      <Message\n      warning\n      header='Could you check something!'\n      list={[\n        'That e-mail has been subscribed, but you have not yet clicked the verification link in your e-mail.',\n      ]}\n    />\n      <Button onClick={submitMeme} type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n};\n\nexport default MemeForm;\n","/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeList/memeList.jsx",[],"/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/memeCard/memeCard.jsx",[],"/home/tejeswar/VS_Workspace/XMeme/frontend/src/components/main/main.jsx",["41","42","43"],"import React from 'react';\nimport MemeCard from '../memeCard/memeCard';\nimport MemeList from '../memeList/memeList';\nimport MemeForm from '../memeForm/memeForm';\nimport {Container}  from 'semantic-ui-react';\n\n\nclass Main extends React.Component{\n\n    state={\n       loading:false\n    }\n\n    checkValidation = (error, response)=>{\n        if(!error){\n          return true\n        }\n      }\n    \n    submitMeme = (postData)=>{\n        this.setState({loading:true});\n        debugger;\n        const memes = fetch(encodeURI(`http://localhost:8080/memes`),{method:'post', headers:{'Content-Type': 'application/json'} ,body:JSON.stringify(postData)})\n        .then((res)=>{\n            return res.json();\n        })\n        .then((resJSON)=>{\n            this.setState({loading:false});\n           let valResult =  this.checkValidation(false,resJSON)\n           if(valResult){\n            // clearValues()\n            return resJSON\n           }\n          \n        })\n        .catch((err)=>{\n            this.setState({loading:false});\n          console.log(`Error occured during fetch api`)\n        })\n    }\n  \n        render(){\n\n            return(\n                <div>\n                    <MemeForm submitMeme = {this.submitMeme} />\n                    <MemeList />\n                </div>\n            )\n\n        }\n    \n\n}\n\nexport default Main;\n\n\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":8,"nodeType":"50","messageId":"51","endLine":1,"endColumn":16},{"ruleId":"48","severity":1,"message":"52","line":3,"column":8,"nodeType":"50","messageId":"51","endLine":3,"endColumn":16},{"ruleId":"53","severity":1,"message":"54","line":12,"column":5,"nodeType":"55","messageId":"56","endLine":22,"endColumn":6},{"ruleId":"48","severity":1,"message":"57","line":25,"column":9,"nodeType":"50","messageId":"51","endLine":25,"endColumn":24},{"ruleId":"48","severity":1,"message":"58","line":31,"column":9,"nodeType":"50","messageId":"51","endLine":31,"endColumn":20},{"ruleId":"48","severity":1,"message":"59","line":2,"column":8,"nodeType":"50","messageId":"51","endLine":2,"endColumn":16},{"ruleId":"48","severity":1,"message":"60","line":5,"column":9,"nodeType":"50","messageId":"51","endLine":5,"endColumn":18},{"ruleId":"48","severity":1,"message":"61","line":23,"column":15,"nodeType":"50","messageId":"51","endLine":23,"endColumn":20},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'MemeForm' is defined but never used.","Identifier","unusedVar","'MemeList' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'checkValidation' is assigned a value but never used.","'clearValues' is assigned a value but never used.","'MemeCard' is defined but never used.","'Container' is defined but never used.","'memes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]